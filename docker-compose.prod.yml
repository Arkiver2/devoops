version: "3.4"

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
    traefik:
        image: traefik:v2.1
        # Enables the web UI and tells Traefik to listen to docker
        # @TODO: Secure traefik api/dashboard
        command:
            #- "--log.level=DEBUG"
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.http.address=:80"

            # HTTPS Config
            - "--entrypoints.https.address=:443"
            - "--certificatesresolvers.webappresolver.acme.tlschallenge=true"
            - "--certificatesresolvers.webappresolver.acme.email=joln@itu.dk"
            - "--certificatesresolvers.webappresolver.acme.storage=/letsencrypt/acme.json"
            # Use Let's encrypt staging server
            # - "--certificatesresolvers.webappresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
        ports:
            # The HTTP port
            - "80:80"

            # The HTTPS port
            - "443:443"
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock:ro

            # So that Traefik can persist the HTTP certificate
            - ./letsencrypt:/letsencrypt
        labels:
            # Tell traefik that this container should be exposed to the public
            - "traefik.enable=true"

            # Add http entrypoint (Tell where the service should be available)
            - "traefik.http.routers.api.rule=Host(`traefik.minitwit.tk`)"
            - "traefik.http.routers.api.entrypoints=http"

            # Redirect http to https
            - "traefik.http.routers.api.middlewares=redirect-https@docker"
            - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
            - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
            
            # Add https entrypoint
            - "traefik.http.routers.api-secure.rule=Host(`traefik.minitwit.tk`)"
            - "traefik.http.routers.api-secure.entrypoints=https"
            - "traefik.http.routers.api-secure.tls.certresolver=webappresolver"

            # Add authentication
            - "traefik.http.routers.api-secure.service=api@internal"
            - "traefik.http.routers.api-secure.middlewares=auth"
            # Generate new user and password with `echo $(htpasswd -nb admin admin) | sed -e s/\\$/\\$\\$/g`
            - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$vVJRD/Hd$$pzWF/71kOPnIfPqS6/t0D."

    webapp:
        build:
            context: "."
            dockerfile: "Dockerfile"
            target: production
            cache_from:
                - jlndk/devoops:latest
        image: jlndk/devoops:latest
        restart: unless-stopped
        environment:
            - "ASPNETCORE_ENVIRONMENT=Production"
            - "MINITWIT_ENVIRONMENT=docker"
            - "POSTGRES_CONNECTIONSTRING=Host=database;Database=MiniTwit;Username=postgres;Password=test"
        volumes:
            - ./aspnetkeys:/root/.aspnet/DataProtection-Keys
        labels:
            # Tell traefik that this container should be exposed to the public
            - "traefik.enable=true"
            # Tell traefik which port our container listens on
            - "traefik.http.services.webapp.loadbalancer.server.port=80"

            # Add http entrypoint (Tell where the service should be available)
            - "traefik.http.routers.webapp.rule=Host(`minitwit.tk`)"
            - "traefik.http.routers.webapp.entrypoints=http"
            # Redirect http to https
            - "traefik.http.routers.webapp.middlewares=redirect-https@docker"
            - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
            - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"

            # Add https entrypoint
            - "traefik.http.routers.webapp-secure.rule=Host(`minitwit.tk`)"
            - "traefik.http.routers.webapp-secure.entrypoints=https"
            - "traefik.http.routers.webapp-secure.tls.certresolver=webappresolver"
        depends_on:
            - database
            - prometheus
            - grafana

    database:
        image: postgres:12
        restart: unless-stopped
        environment:
            - "POSTGRES_PASSWORD=test"
        volumes:
            - ./postgresdata:/var/lib/postgresql/data

    prometheus:
        image: prom/prometheus
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        
    grafana:
        image: grafana/grafana
        volumes:
            - grafana_data:/var/lib/grafana
        labels:
            # Tell traefik that this container should be exposed to the public
            - "traefik.enable=true"
            # Tell traefik which port our container listens on
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"

            # Add http entrypoint (Tell where the service should be available)
            - "traefik.http.routers.grafana.rule=Host(`grafana.minitwit.tk`)"
            - "traefik.http.routers.grafana.entrypoints=http"
            # Redirect http to https
            - "traefik.http.routers.grafana.middlewares=redirect-https@docker"
            - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
            - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"

            # Add https entrypoint
            - "traefik.http.routers.grafana-secure.rule=Host(`grafana.minitwit.tk`)"
            - "traefik.http.routers.grafana-secure.entrypoints=https"
            - "traefik.http.routers.grafana-secure.tls.certresolver=webappresolver"
        depends_on: 
            - prometheus
